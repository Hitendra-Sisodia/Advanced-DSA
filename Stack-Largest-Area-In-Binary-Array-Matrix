// max area of binary rectangle
#include<bits/stdc++.h>
using namespace std;
vector<int> previousSmallestElement(int *arr,int n)
{   
    stack<int> s;
    vector<int> ans(n);
    s.push(-1);
    for(int i = 0 ; i < n ; i++){
        while(s.top() != -1 && arr[s.top()] > arr[i]){
            s.pop();
        }
        ans[i] = s.top();
        s.push(i);
    }
    return ans;
}
vector<int> nextSmallestElement(int *arr,int n)
{   
    stack<int> s;
    vector<int> ans(n);
    s.push(-1);
    for(int i = n - 1 ; i >= 0 ; i--){
        while(s.top() != -1 && arr[s.top()] > arr[i]){
            s.pop();
        }
        ans[i] = s.top();
        s.push(i);
    }
    return ans;
}
int largestRectangleArea(int *M,int n)
{
    vector<int> previous(n);
    previous = previousSmallestElement(M,n);
    vector<int> next(n);
    next = nextSmallestElement(M,n);
    int area = INT_MIN;
    for(int i = 0 ; i < n ; i++){
        int l = M[i];
        if(next[i] == -1){
            next[i] = n;
        }
        int b = next[i] - previous[i] - 1;
        int newArea = l * b;
        area = max(area,newArea);
    }
    return area;
}
int areaOfBinaryRectangle(int M[4][4],int n, int m)
{
    // area of 0th row
    int area = largestRectangleArea(M[0],m);
    // area of other rows
    for(int i = 0 ; i < n ; i++){
        for(int j = 0 ; j < m ; j++){
            if(M[i][j] != 0){  // if base of the histogram is 0 then histogram is not possible
                M[i][j] = M[i][j] + M[i-1][j];
            }
            else{
                M[i][j] = 0;
            }
        }
        int newArea = largestRectangleArea(M[i],m);
        area = max(area,newArea);
    }
    return area;
}
int main()
{   
    int arr[][4] = {{0,1,1,0},{1,1,1,1},{1,1,1,1},{1,1,0,0}};
    cout<<"Max area is:"<<areaOfBinaryRectangle(arr,4,4);
}
