// palindrome Linked List or not (Method - 2)
#include<bits/stdc++.h>
using namespace std;
struct node
{
    int data;
    node *link;
};
node *createnode(int X)
{
    node *newnode = (node *)malloc(sizeof(node));
    newnode -> link = NULL;
    newnode -> data = X;
    return newnode;
}
void insertAtTail(node **head,int X)
{
    node *temp = *head;
    node *newnode = createnode(X);
    if(*head == NULL){
        *head = newnode;
    }
    else{
        while(temp -> link != NULL){
            temp = temp -> link;
        }
        temp -> link = newnode;
    }
}
bool solve(node *head,node *midNode,int len)
{   
    node *temp1 = head;
    node *temp2 = midNode;
    if(len % 2 == 0){
        do{
            if(temp1 -> data != temp2 -> link -> data){
                return false;
            }
            temp1 = temp1 -> link;
            temp2 = temp2 -> link;
        }
        while(temp1 != midNode -> link && temp2 != NULL);
        return true;
    }
    else{
        while(temp1 -> link != midNode && temp2 != NULL){
            if(temp1 -> data != temp2 -> link -> data){
                return false;
            }
            temp1 = temp1 -> link;
            temp2 = temp2 -> link;
        }
        return true;
    }
}
bool checkPalindrome(node **head)
{   
    node *temp = *head;
    node *midNode = NULL;
    int len = 0;
    while(temp != NULL){
        temp = temp -> link;
        len++;
    }
    int mid = len/2;
    cout<<"Mid:"<<mid<<endl;
    int s = 1;
    temp  = *head;
    if(len % 2 == 0){
        while(s < mid){
            temp = temp -> link;
            s++;
        }
        node *prev = NULL;
        midNode = temp;
        node *current = temp -> link;
        while(current != NULL){
            node *forward = current -> link;
            current -> link = prev;
            prev = current;
            current = forward;
        }
        midNode -> link = prev;
    }
    if(len % 2 != 0){
        while(s < mid + 1){
            temp = temp -> link;
            s++;
        }
        node *prev= NULL;
        midNode = temp;
        node *current = temp -> link;
        while(current != NULL){
            node *forward = current -> link;
            current -> link = prev;
            prev = current;
            current = forward;
        }
        midNode -> link = prev;
    }
    if(solve(*head,midNode,len)){
        return true;
    }
    else{
        return false;
    }
}
void display(node *head)
{
    node *temp = head;
    while(temp != NULL){
        cout<<temp -> data<<" ";
        temp = temp -> link;
    }
    cout<<endl;
}
int main()
{
    node *head = NULL;
    insertAtTail(&head,21);
    insertAtTail(&head,22);
    insertAtTail(&head,23);
    insertAtTail(&head,24);
    insertAtTail(&head,23);
    insertAtTail(&head,22);
    insertAtTail(&head,21);
    display(head);
    cout<<checkPalindrome(&head)<<endl;
    display(head);
}
