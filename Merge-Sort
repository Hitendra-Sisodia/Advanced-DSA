#include<bits/stdc++.h>
#include<iostream>
using namespace std;
void merge(int *array,int s,int e)
{
    int mid = (s+e)/2;
    int len1 = mid - s + 1;
    int len2 = e - mid;
    int *first = new int[len1];  // dynamic created array which further deleted
    int *second = new int[len2];
    int currentIndex = s; // s shows array starting from 0 for 1th iteration.
    // copy left subpart of array in first
    for(int i = 0 ; i < len1 ; i++){  // index is always 1 less than len1.
        first[i] = array[currentIndex++];
    }
    currentIndex = mid + 1; // mid + 1 shows right sub array
    // copy right subpart of array in second
    for(int i = 0 ; i < len2 ; i++){
        second[i] = array[currentIndex++]; // [currentIndex++] same as current Index and then ++.
    }
    // merge to unsorted array
    int index1 = 0;
    int index2 = 0;
    currentIndex = s;
    while(index1 < len1 && index2 < len2){ // array conist of smaller element will placed first.
        if(first[index1] < second[index2]){        // at currentindex starting from s.
            array[currentIndex++] = first[index1++]; 
        }
        else{
            array[currentIndex++] = second[index2++];
        }
    }
    while(index1 < len1){
        array[currentIndex++] = first[index1++];
    }
    while(index2 < len2){
        array[currentIndex++] = second[index2++];
    }
    delete []first;
    delete []second;
}
void mergeSort(int *arr,int s,int e)
{   
    if(s >= e){
        return ;
    }
    int mid = (s+e)/2;
    mergeSort(arr,s,mid);
    mergeSort(arr,mid+1,e);
    merge(arr,s,e);
}
int main()
{
    int s = 0;
    int n = 5;
    int arr[5] = {5,20,555,72,1};
    mergeSort(arr,0,n-1);
    for(int i = 0 ; i < 5 ; i++){
        cout<<arr[i]<<" ";
    }
}
