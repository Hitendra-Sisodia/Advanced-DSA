// Minimum cost/switch to make string valid 
#include<bits/stdc++.h>
using namespace std;
int minNoBracket(stack<char> &stack,string str)
{
    int len = str.length();
    if(len % 2 != 0){
        return -1;
    }
    else{
        for(int i = 0 ; i < len ; i++){
            char ch = str[i];
            if(ch == '{'){
                stack.push(ch);
            }
            else{
                if(!stack.empty() && stack.top() == '{'){
                    stack.pop();
                }
                else{
                    stack.push(ch);  // pushing right } if stack is empty
                }
            }
        }
    }
    int a = 0;
    int b = 0;
    // counting number of a and b paranthesis
    while(!stack.empty()){
        char ch = stack.top();
        if(ch == '{'){
            a++;
        }
        else{
            b++;
        }
        stack.pop();
    }
    int ans = (a+1)/2 + (b+1)/2;
    return ans;
}
int main()
{
    stack<char> stack;
    string str = "}{{{{}{}}}}{";
    cout<<"Min cost of Bracket: "<<minNoBracket(stack,str);
}
