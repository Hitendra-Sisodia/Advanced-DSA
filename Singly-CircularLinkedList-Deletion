// Singly circular linked list insertion
#include<bits/stdc++.h>
using namespace std;
struct node
{
    int data;
    node *link;
};
node *createnode(int X)
{
    node *newnode = (node *)malloc(sizeof(node));
    newnode -> link = NULL;
    newnode -> data = X;
    return newnode;
}
void insertionAtTail(node **head,node **tail,int X)
{
    node *temp1 = *head;
    node *temp2 = *tail;
    node *newnode = createnode(X);
    if(*head == NULL){
        *head = newnode;
        *tail = newnode;
        newnode -> link = newnode; 
    }
    else{
        newnode -> link = temp1;
        temp2 -> link = newnode;
        *tail = newnode;
    }
}
void deletionAtHead(node **head,node **tail)
{   
    node *temp1 = *head;        // don't access *head -> link part directly 
    node *temp2 = *tail;        // it gives error
    if(*head == NULL){
        cout<<"Empty Linked List";
    }
    else{
        *head = temp1 -> link;
        temp2 -> link = *head;
        free(temp1);
    }
}
void deletionAtTail(node **head,node **tail)
{   
    node *prev = NULL;
    node *temp1 = *head;
    node *temp2 = *tail;
    if(*head == NULL){
        cout<<"Empty Linked List";
    }
    else{
        while(temp1 -> link != *head){
            prev = temp1;
            temp1 = temp1 -> link;
        }
        prev -> link = *head;
        free(temp1);
    }
}
void deletionAtPos(node **head,node **tail,int pos)
{   
    node *prev = NULL;
    node *temp1 = *head;
    node *temp2 = *tail;
    if(*head == NULL){
        cout<<"Empty linked list";
    }
    if(pos == 1){
        deletionAtHead(&*head,&*tail);
    }
    for(int i = 2 ; i <= pos ; i++){
        prev = temp1;
        temp1 = temp1 -> link;
    }
    prev -> link = temp1 -> link;
    free(temp1);
}
void display(node *head)
{
    node *temp = head;
    do{
        cout<<temp -> data<<" ";
        temp = temp -> link;
    }
    while(temp != head);
    cout<<endl;
}
int main()
{
    node *head = NULL;
    node *tail = NULL;
    insertionAtTail(&head,&tail,10);
    insertionAtTail(&head,&tail,30);
    insertionAtTail(&head,&tail,40);
    insertionAtTail(&head,&tail,50);
    insertionAtTail(&head,&tail,60);
    display(head);
    deletionAtHead(&head,&tail);
    display(head);
    deletionAtTail(&head,&tail);
    display(head);
    deletionAtPos(&head,&tail,2);
    display(head);
}
